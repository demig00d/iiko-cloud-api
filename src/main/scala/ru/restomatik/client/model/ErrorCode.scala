/**
 * iikoCloud API
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.restomatik.client.model



object ErrorCode extends Enumeration {
    type ErrorCode = ErrorCode.Value
    val Common = Value("Common")
    val IllegalDeliveryStatus = Value("IllegalDeliveryStatus")
    val CustomerNameNotSpecified = Value("CustomerNameNotSpecified")
    val ProductNotFound = Value("ProductNotFound")
    val MarketingSourceNotFound = Value("MarketingSourceNotFound")
    val PaymentTypeNotFound = Value("PaymentTypeNotFound")
    val ProductSizeNotFound = Value("ProductSizeNotFound")
    val ProductGroupNotFound = Value("ProductGroupNotFound")
    val OrderNotFound = Value("OrderNotFound")
    val ConceptionNotFound = Value("ConceptionNotFound")
    val DuplicatedOrderId = Value("DuplicatedOrderId")
    val TerminalGroupIdNotDetermined = Value("TerminalGroupIdNotDetermined")
    val TerminalGroupUnregistered = Value("TerminalGroupUnregistered")
    val InvalidPhone = Value("InvalidPhone")
    val ModifierDuplicated = Value("ModifierDuplicated")
    val ProductCanBuyFromCashdesk = Value("ProductCanBuyFromCashdesk")
    val DeliveryOpinionMarkInvalid = Value("DeliveryOpinionMarkInvalid")
    val WrongDeliveryStatusForOpinion = Value("WrongDeliveryStatusForOpinion")
    val OpinionCommentTooLong = Value("OpinionCommentTooLong")
    val SurveyItemNotFound = Value("SurveyItemNotFound")
    val PaymentTypeCanNotBeUsedAsExternal = Value("PaymentTypeCanNotBeUsedAsExternal")
    val AddressNotFound = Value("AddressNotFound")
    val HomeNotFound = Value("HomeNotFound")
    val IikonetPaymentAdditionalDataCanNotBeParsed = Value("IikonetPaymentAdditionalDataCanNotBeParsed")
    val IikonetPaymentExternalIdNotFound = Value("IikonetPaymentExternalIdNotFound")
    val IikonetPaymentSumLessThanMarketingDiscount = Value("IikonetPaymentSumLessThanMarketingDiscount")
    val DiscountCardNotFound = Value("DiscountCardNotFound")
    val DiscountCardTypeModeForbidden = Value("DiscountCardTypeModeForbidden")
    val Iikocard5PaymentAdditionalDataCanNotBeParsed = Value("Iikocard5PaymentAdditionalDataCanNotBeParsed")
    val Iikocard5PaymentExternalIdNotFound = Value("Iikocard5PaymentExternalIdNotFound")
    val Iikocard5PaymentSumLessThanMarketingDiscount = Value("Iikocard5PaymentSumLessThanMarketingDiscount")
    val Iikocard5PaymentCanNotCreateCustomData = Value("Iikocard5PaymentCanNotCreateCustomData")
    val CourierIdDoesNotExist = Value("CourierIdDoesNotExist")
    val CourierDoesNotOwnOrder = Value("CourierDoesNotOwnOrder")
    val WrongDeliveryStatus = Value("WrongDeliveryStatus")
    val CanNotAssignCourierToOrder = Value("CanNotAssignCourierToOrder")
    val UserNotFoundByExternalPassword = Value("UserNotFoundByExternalPassword")
    val UserNotFound = Value("UserNotFound")
    val Iikocard51PaymentAdditionalDataCanNotBeParsed = Value("Iikocard51PaymentAdditionalDataCanNotBeParsed")
    val Iikocard51PaymentCredentialNotFound = Value("Iikocard51PaymentCredentialNotFound")
    val Iikocard51PaymentSearchScopeNotFound = Value("Iikocard51PaymentSearchScopeNotFound")
    val ComboDuplicated = Value("ComboDuplicated")
    val InvalidReferenceToCombo = Value("InvalidReferenceToCombo")
    val InvalidComboItemsAmount = Value("InvalidComboItemsAmount")
    val InvalidComboItemsGuest = Value("InvalidComboItemsGuest")
    val InvalidReferenceToGuest = Value("InvalidReferenceToGuest")
    val GuestDuplicated = Value("GuestDuplicated")
    val GuestNameNotSpecified = Value("GuestNameNotSpecified")
    val OrderTypeNotFound = Value("OrderTypeNotFound")
    val OrderServiceTypeDoesNotMatchSelfServiceMode = Value("OrderServiceTypeDoesNotMatchSelfServiceMode")
    val DeliveryDateNotSpecified = Value("DeliveryDateNotSpecified")
    val OrderStatusChangedInIikoFront = Value("OrderStatusChangedInIikoFront")
    val PaymentAdditionalDataTooLong = Value("PaymentAdditionalDataTooLong")
    val PaymentSumShouldBePositive = Value("PaymentSumShouldBePositive")
    val DiscountSumNotSpecified = Value("DiscountSumNotSpecified")
    val InvalidDiscountItem = Value("InvalidDiscountItem")
    val RequestProductPriceIsNotEqualToFrontPrice = Value("RequestProductPriceIsNotEqualToFrontPrice")
    val OrderItemsNotExists = Value("OrderItemsNotExists")
    val EntityAlreadyInUse = Value("EntityAlreadyInUse")
    val DiscountItemPositionNotFound = Value("DiscountItemPositionNotFound")
    val DiscountItemDuplicatePositions = Value("DiscountItemDuplicatePositions")
    val NonUnqiueOrderItemPosition = Value("NonUnqiueOrderItemPosition")
    val EmptyOrderItemPosition = Value("EmptyOrderItemPosition")
    val IncorrectOrderType = Value("IncorrectOrderType")
    val Incorrect = Value("Incorrect")
    val TerminalGroupDisabled = Value("TerminalGroupDisabled")
    val OrganizationUnregistered = Value("OrganizationUnregistered")
    val OrganizationDisabled = Value("OrganizationDisabled")
    val TooSmallDeliveryDate = Value("TooSmallDeliveryDate")
    val IikoFrontTooOldVersion = Value("IikoFrontTooOldVersion")
    val DuplicatedReserveId = Value("DuplicatedReserveId")
    val TipsTypeNotApplicable = Value("TipsTypeNotApplicable")
    val AnonymousCustomerDisabled = Value("AnonymousCustomerDisabled")
    val InternalServerError = Value("InternalServerError")
    val UnknownError = Value("UnknownError")
}

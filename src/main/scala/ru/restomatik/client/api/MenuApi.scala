/**
 * iikoCloud API
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.restomatik.client.api

import ru.restomatik.client.model.CalculateComboPriceRequest
import ru.restomatik.client.model.CalculateComboPriceResponse
import ru.restomatik.client.model.CheckStopListRequest
import ru.restomatik.client.model.CheckStopListResponse
//import ru.restomatik.client.model.ErrorResponse
//import ru.restomatik.client.model.ExternalMenuPreset
import ru.restomatik.client.model.GetCombosInfoRequest
import ru.restomatik.client.model.GetCombosInfoResponse
//import ru.restomatik.client.model.MenuRequest
import ru.restomatik.client.model.MenusDataResponse
import ru.restomatik.client.model.NomenclatureRequest
import ru.restomatik.client.model.NomenclatureResponse
import ru.restomatik.client.model.StopListsRequest
import ru.restomatik.client.model.StopListsResponse
import ru.restomatik.client.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object MenuApi {

def apply(baseUrl: String = "https://api-ru.iiko.services") = new MenuApi(baseUrl)
}

class MenuApi(baseUrl: String) {

  /**
   * Make combo price calculation.
   *
   * Expected answers:
   *   code 200 : CalculateComboPriceResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   *
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param calculateComboPriceRequest
   */
  def api1ComboCalculatePost(authorization: String, timeout: Option[Int] = None, calculateComboPriceRequest: Option[CalculateComboPriceRequest] = None
): Request[Either[ResponseException[String, Exception], CalculateComboPriceResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/combo/calculate")
      .contentType("application/json")
      .header("Authorization", s"Bearer $authorization")
      .header("Timeout", timeout.toString)
      .body(calculateComboPriceRequest)
      .response(asJson[CalculateComboPriceResponse])

  /**
   * Get all organization's combos.
   *
   * Expected answers:
   *   code 200 : GetCombosInfoResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   *
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param getCombosInfoRequest
   */
  def api1ComboPost(authorization: String, timeout: Option[Int] = None, getCombosInfoRequest: Option[GetCombosInfoRequest] = None
): Request[Either[ResponseException[String, Exception], GetCombosInfoResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/combo")
      .contentType("application/json")
      .header("Authorization", s"Bearer $authorization")
      .header("Timeout", timeout.toString)
      .body(getCombosInfoRequest)
      .response(asJson[GetCombosInfoResponse])

  /**
   * Expected answers:
   *   code 200 : NomenclatureResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   *
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param nomenclatureRequest
   */
  def api1NomenclaturePost(authorization: String, timeout: Option[Int] = None, nomenclatureRequest: Option[NomenclatureRequest] = None
): Request[Either[ResponseException[String, Exception], NomenclatureResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/nomenclature")
      .contentType("application/json")
      .header("Authorization", s"Bearer $authorization")
      .header("Timeout", timeout.toString)
      .body(nomenclatureRequest)
      .response(asJson[NomenclatureResponse])

  /**
   * Expected answers:
   *   code 200 : CheckStopListResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   *
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param checkStopListRequest
   */
  def api1StopListsCheckPost(authorization: String, timeout: Option[Int] = None, checkStopListRequest: Option[CheckStopListRequest] = None
): Request[Either[ResponseException[String, Exception], CheckStopListResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/stop_lists/check")
      .contentType("application/json")
      .header("Authorization", s"Bearer $authorization")
      .header("Timeout", timeout.toString)
      .body(checkStopListRequest)
      .response(asJson[CheckStopListResponse])

  /**
   * Expected answers:
   *   code 200 : StopListsResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   *
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param stopListsRequest
   */
  def api1StopListsPost(authorization: String, timeout: Option[Int] = None, stopListsRequest: Option[StopListsRequest] = None
): Request[Either[ResponseException[String, Exception], StopListsResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/stop_lists")
      .contentType("application/json")
      .header("Authorization", s"Bearer $authorization")
      .header("Timeout", timeout.toString)
      .body(stopListsRequest)
      .response(asJson[StopListsResponse])

  /**
   * Expected answers:
   *   code 200 : ExternalMenuPreset (success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   *
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param menuRequest
   */
//  def api2MenuByIdPost(authorization: String, timeout: Option[Int] = None, menuRequest: Option[MenuRequest] = None
//): Request[Either[ResponseException[String, Exception], ExternalMenuPreset], Any] =
//    basicRequest
//      .method(Method.POST, uri"$baseUrl/api/2/menu/by_id")
//      .contentType("application/json")
//      .header("Authorization", s"Bearer $authorization")
//      .header("Timeout", timeout.toString)
//      .body(menuRequest)
//      .response(asJson[ExternalMenuPreset])

  /**
   * Expected answers:
   *   code 200 : MenusDataResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   *
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   */
  def api2MenuPost(authorization: String, timeout: Option[Int] = None
): Request[Either[ResponseException[String, Exception], MenusDataResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/2/menu")
      .contentType("application/json")
      .header("Authorization", s"Bearer $authorization")
      .header("Timeout", timeout.toString)
      .response(asJson[MenusDataResponse])

}

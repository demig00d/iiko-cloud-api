/**
 * iikoCloud API
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.restomatik.client.api

import ru.restomatik.client.core.JsonSupport._
import ru.restomatik.client.model._
import sttp.client3._
import sttp.model.Method

object CustomersApi {

def apply(baseUrl: String = "https://api-ru.iiko.services") = new CustomersApi(baseUrl)
}

class CustomersApi(baseUrl: String) {

  /**
   * Add new card for customer.
   *
   * Expected answers:
   *   code 200 : Any (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   *
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param addMagnetCardRequest
   */
  def api1LoyaltyIikoCustomerCardAddPost(authorization: String, timeout: Option[Int] = None, addMagnetCardRequest: Option[AddMagnetCardRequest] = None
): Request[Either[ResponseException[String, Exception], Unit], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/loyalty/iiko/customer/card/add")
      .contentType("application/json")
      .header("Authorization", authorization.toString)
      .header("Timeout", timeout.toString)
      .body(addMagnetCardRequest)
      .response(asJson[Unit])

  /**
   * Delete existing card for customer.
   *
   * Expected answers:
   *   code 200 : Any (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   *
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param deleteMagnetCardRequest
   */
  def api1LoyaltyIikoCustomerCardRemovePost(authorization: String, timeout: Option[Int] = None, deleteMagnetCardRequest: Option[DeleteMagnetCardRequest] = None
): Request[Either[ResponseException[String, Exception], Unit], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/loyalty/iiko/customer/card/remove")
      .contentType("application/json")
      .header("Authorization", authorization.toString)
      .header("Timeout", timeout.toString)
      .body(deleteMagnetCardRequest)
      .response(asJson[Unit])

  /**
   * Create or update customer info by id or phone or card track.
   *
   * Expected answers:
   *   code 200 : CreateOrUpdateCustomerResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   *
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param createOrUpdateCustomerRequest
   */
  def api1LoyaltyIikoCustomerCreateOrUpdatePost(authorization: String, timeout: Option[Int] = None, createOrUpdateCustomerRequest: Option[CreateOrUpdateCustomerRequest] = None
): Request[Either[ResponseException[String, Exception], CreateOrUpdateCustomerResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/loyalty/iiko/customer/create_or_update")
      .contentType("application/json")
      .header("Authorization", authorization.toString)
      .header("Timeout", timeout.toString)
      .body(createOrUpdateCustomerRequest)
      .response(asJson[CreateOrUpdateCustomerResponse])

  /**
   * Get customer info by specified criterion.
   *
   * Expected answers:
   *   code 200 : GetCustomerInfoResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   *
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param getCustomerInfoRequest
   */
  def api1LoyaltyIikoCustomerInfoPost(authorization: String, timeout: Option[Int] = None, getCustomerInfoRequest: Option[GetCustomerInfoRequest] = None
): Request[Either[ResponseException[String, Exception], GetCustomerInfoResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/loyalty/iiko/customer/info")
      .contentType("application/json")
      .header("Authorization", authorization.toString)
      .header("Timeout", timeout.toString)
      .body(getCustomerInfoRequest)
      .response(asJson[GetCustomerInfoResponse])

  /**
   * Add new customer for program.
   *
   * Expected answers:
   *   code 200 : AddCustomerToProgramResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   *
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param addCustomerToProgramRequest
   */
  def api1LoyaltyIikoCustomerProgramAddPost(authorization: String, timeout: Option[Int] = None, addCustomerToProgramRequest: Option[AddCustomerToProgramRequest] = None
): Request[Either[ResponseException[String, Exception], AddCustomerToProgramResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/loyalty/iiko/customer/program/add")
      .contentType("application/json")
      .header("Authorization", authorization.toString)
      .header("Timeout", timeout.toString)
      .body(addCustomerToProgramRequest)
      .response(asJson[AddCustomerToProgramResponse])

  /**
   * Cancel holding transaction that created earlier.
   *
   * Expected answers:
   *   code 200 : Any (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   *
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param cancelHoldMoneyRequest
   */
  def api1LoyaltyIikoCustomerWalletCancelHoldPost(authorization: String, timeout: Option[Int] = None, cancelHoldMoneyRequest: Option[CancelHoldMoneyRequest] = None
): Request[Either[ResponseException[String, Exception], Unit], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/loyalty/iiko/customer/wallet/cancel_hold")
      .contentType("application/json")
      .header("Authorization", authorization.toString)
      .header("Timeout", timeout.toString)
      .body(cancelHoldMoneyRequest)
      .response(asJson[Unit])

  /**
   * Withdraw customer balance.
   *
   * Expected answers:
   *   code 200 : Any (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   *
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param changeUserBalanceRequest
   */
  def api1LoyaltyIikoCustomerWalletChargeoffPost(authorization: String, timeout: Option[Int] = None, changeUserBalanceRequest: Option[ChangeUserBalanceRequest] = None
): Request[Either[ResponseException[String, Exception], Unit], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/loyalty/iiko/customer/wallet/chargeoff")
      .contentType("application/json")
      .header("Authorization", authorization.toString)
      .header("Timeout", timeout.toString)
      .body(changeUserBalanceRequest)
      .response(asJson[Unit])

  /**
   * Hold customer's money in loyalty program. Payment will be process on POS during processing of an order.
   *
   * Expected answers:
   *   code 200 : HoldMoneyResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   *
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param holdMoneyRequest
   */
  def api1LoyaltyIikoCustomerWalletHoldPost(authorization: String, timeout: Option[Int] = None, holdMoneyRequest: Option[HoldMoneyRequest] = None
): Request[Either[ResponseException[String, Exception], HoldMoneyResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/loyalty/iiko/customer/wallet/hold")
      .contentType("application/json")
      .header("Authorization", authorization.toString)
      .header("Timeout", timeout.toString)
      .body(holdMoneyRequest)
      .response(asJson[HoldMoneyResponse])

  /**
   * Refill customer balance.
   *
   * Expected answers:
   *   code 200 : Any (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   *
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param changeUserBalanceRequest
   */
  def api1LoyaltyIikoCustomerWalletTopupPost(authorization: String, timeout: Option[Int] = None, changeUserBalanceRequest: Option[ChangeUserBalanceRequest] = None
): Request[Either[ResponseException[String, Exception], Unit], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/loyalty/iiko/customer/wallet/topup")
      .contentType("application/json")
      .header("Authorization", authorization.toString)
      .header("Timeout", timeout.toString)
      .body(changeUserBalanceRequest)
      .response(asJson[Unit])

}

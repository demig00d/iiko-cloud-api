/**
 * iikoCloud API
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.restomatik.client.api

import ru.restomatik.client.core.JsonSupport._
import ru.restomatik.client.model._
import sttp.client3._
import sttp.model.Method

object DictionariesApi {

def apply(baseUrl: String = "https://api-ru.iiko.services") = new DictionariesApi(baseUrl)
}

class DictionariesApi(baseUrl: String) {

  /**
   *    > Allowed from version `7.7.1`.
   * 
   * Expected answers:
   *   code 200 : CancelCausesResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   * 
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param cancelCausesRequest 
   */
  def api1CancelCausesPost(authorization: String, timeout: Option[Int] = None, cancelCausesRequest: Option[CancelCausesRequest] = None
): Request[Either[ResponseException[String, Exception], CancelCausesResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/cancel_causes")
      .contentType("application/json")
      .header("Authorization", authorization.toString)
      .header("Timeout", timeout.toString)
      .body(cancelCausesRequest)
      .response(asJson[CancelCausesResponse])

  /**
   * Expected answers:
   *   code 200 : OrderTypesResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   * 
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param orderTypesRequest 
   */
  def api1DeliveriesOrderTypesPost(authorization: String, timeout: Option[Int] = None, orderTypesRequest: Option[OrderTypesRequest] = None
): Request[Either[ResponseException[String, Exception], OrderTypesResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/deliveries/order_types")
      .contentType("application/json")
      .header("Authorization", authorization.toString)
      .header("Timeout", timeout.toString)
      .body(orderTypesRequest)
      .response(asJson[OrderTypesResponse])

  /**
   * Expected answers:
   *   code 200 : DiscountsResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   * 
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param discountsRequest 
   */
  def api1DiscountsPost(authorization: String, timeout: Option[Int] = None, discountsRequest: Option[DiscountsRequest] = None
): Request[Either[ResponseException[String, Exception], DiscountsResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/discounts")
      .contentType("application/json")
      .header("Authorization", authorization.toString)
      .header("Timeout", timeout.toString)
      .body(discountsRequest)
      .response(asJson[DiscountsResponse])

  /**
   * Expected answers:
   *   code 200 : PaymentTypesResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   * 
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param paymentTypesRequest 
   */
  def api1PaymentTypesPost(authorization: String, timeout: Option[Int] = None, paymentTypesRequest: Option[PaymentTypesRequest] = None
): Request[Either[ResponseException[String, Exception], PaymentTypesResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/payment_types")
      .contentType("application/json")
      .header("Authorization", authorization.toString)
      .header("Timeout", timeout.toString)
      .body(paymentTypesRequest)
      .response(asJson[PaymentTypesResponse])

  /**
   *    > Allowed from version `7.5.3`.
   * 
   * Expected answers:
   *   code 200 : RemovalTypesResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   * 
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param removalTypesRequest 
   */
  def api1RemovalTypesPost(authorization: String, timeout: Option[Int] = None, removalTypesRequest: Option[RemovalTypesRequest] = None
): Request[Either[ResponseException[String, Exception], RemovalTypesResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/removal_types")
      .contentType("application/json")
      .header("Authorization", authorization.toString)
      .header("Timeout", timeout.toString)
      .body(removalTypesRequest)
      .response(asJson[RemovalTypesResponse])

  /**
   *    > Allowed from version `7.7.4`.
   * 
   * Expected answers:
   *   code 200 : TipsTypesResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   * 
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   */
  def api1TipsTypesPost(authorization: String, timeout: Option[Int] = None
): Request[Either[ResponseException[String, Exception], TipsTypesResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/tips_types")
      .contentType("application/json")
      .header("Authorization", authorization.toString)
      .header("Timeout", timeout.toString)
      .response(asJson[TipsTypesResponse])

}

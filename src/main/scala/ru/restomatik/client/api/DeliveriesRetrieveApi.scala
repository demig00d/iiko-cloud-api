/**
 * iikoCloud API
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.restomatik.client.api

import ru.restomatik.client.core.JsonSupport._
import ru.restomatik.client.model._
import sttp.client3._
import sttp.model.Method

object DeliveriesRetrieveApi {

def apply(baseUrl: String = "https://api-ru.iiko.services") = new DeliveriesRetrieveApi(baseUrl)
}

class DeliveriesRetrieveApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 200 : OrdersWithRevisionResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   * 
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param ordersByDeliveryDateAndPhoneRequest 
   */
  def api1DeliveriesByDeliveryDateAndPhonePost(authorization: String, timeout: Option[Int] = None, ordersByDeliveryDateAndPhoneRequest: Option[OrdersByDeliveryDateAndPhoneRequest] = None
): Request[Either[ResponseException[String, Exception], OrdersWithRevisionResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/deliveries/by_delivery_date_and_phone")
      .contentType("application/json")
      .header("Authorization", authorization.toString)
      .header("Timeout", timeout.toString)
      .body(ordersByDeliveryDateAndPhoneRequest)
      .response(asJson[OrdersWithRevisionResponse])

  /**
   * Expected answers:
   *   code 200 : OrdersWithRevisionResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   * 
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param ordersByDeliveryDateAndFilterRequest 
   */
  def api1DeliveriesByDeliveryDateAndSourceKeyAndFilterPost(authorization: String, timeout: Option[Int] = None, ordersByDeliveryDateAndFilterRequest: Option[OrdersByDeliveryDateAndFilterRequest] = None
): Request[Either[ResponseException[String, Exception], OrdersWithRevisionResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/deliveries/by_delivery_date_and_source_key_and_filter")
      .contentType("application/json")
      .header("Authorization", authorization.toString)
      .header("Timeout", timeout.toString)
      .body(ordersByDeliveryDateAndFilterRequest)
      .response(asJson[OrdersWithRevisionResponse])

  /**
   * Expected answers:
   *   code 200 : OrdersWithRevisionResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   * 
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param ordersByDeliveryDateAndStatusRequest 
   */
  def api1DeliveriesByDeliveryDateAndStatusPost(authorization: String, timeout: Option[Int] = None, ordersByDeliveryDateAndStatusRequest: Option[OrdersByDeliveryDateAndStatusRequest] = None
): Request[Either[ResponseException[String, Exception], OrdersWithRevisionResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/deliveries/by_delivery_date_and_status")
      .contentType("application/json")
      .header("Authorization", authorization.toString)
      .header("Timeout", timeout.toString)
      .body(ordersByDeliveryDateAndStatusRequest)
      .response(asJson[OrdersWithRevisionResponse])

  /**
   * Expected answers:
   *   code 200 : OrdersResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   * 
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param ordersByIdRequest 
   */
  def api1DeliveriesByIdPost(authorization: String, timeout: Option[Int] = None, ordersByIdRequest: Option[OrdersByIdRequest] = None
): Request[Either[ResponseException[String, Exception], OrdersResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/deliveries/by_id")
      .contentType("application/json")
      .header("Authorization", authorization.toString)
      .header("Timeout", timeout.toString)
      .body(ordersByIdRequest)
      .response(asJson[OrdersResponse])

  /**
   * Expected answers:
   *   code 200 : OrdersWithRevisionResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   * 
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param ordersByRevisionRequest 
   */
  def api1DeliveriesByRevisionPost(authorization: String, timeout: Option[Int] = None, ordersByRevisionRequest: Option[OrdersByRevisionRequest] = None
): Request[Either[ResponseException[String, Exception], OrdersWithRevisionResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/deliveries/by_revision")
      .contentType("application/json")
      .header("Authorization", authorization.toString)
      .header("Timeout", timeout.toString)
      .body(ordersByRevisionRequest)
      .response(asJson[OrdersWithRevisionResponse])

}

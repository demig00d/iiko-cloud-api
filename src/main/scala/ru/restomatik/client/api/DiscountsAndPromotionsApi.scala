/**
 * iikoCloud API
 * <h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.restomatik.client.api

import ru.restomatik.client.core.JsonSupport._
import ru.restomatik.client.model._
import sttp.client3._
import sttp.model.Method

object DiscountsAndPromotionsApi {

def apply(baseUrl: String = "https://api-ru.iiko.services") = new DiscountsAndPromotionsApi(baseUrl)
}

class DiscountsAndPromotionsApi(baseUrl: String) {

  /**
   * Calculate discounts and other loyalty items for an order.
   * 
   * Expected answers:
   *   code 200 : CalculateCheckinResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   * 
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param calculateCheckinRequest 
   */
  def api1LoyaltyIikoCalculatePost(authorization: String, timeout: Option[Int] = None, calculateCheckinRequest: Option[CalculateCheckinRequest] = None
): Request[Either[ResponseException[String, Exception], CalculateCheckinResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/loyalty/iiko/calculate")
      .contentType("application/json")
      .header("Authorization", s"Bearer $authorization")
      .header("Timeout", timeout.toString)
      .body(calculateCheckinRequest)
      .response(asJson[CalculateCheckinResponse])

  /**
   * Get list of non-activated coupons.
   * 
   * Expected answers:
   *   code 200 : NotActivatedCouponResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   * 
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param notActivatedCouponRequest 
   */
  def api1LoyaltyIikoCouponsBySeriesPost(authorization: String, timeout: Option[Int] = None, notActivatedCouponRequest: Option[NotActivatedCouponRequest] = None
): Request[Either[ResponseException[String, Exception], NotActivatedCouponResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/loyalty/iiko/coupons/by_series")
      .contentType("application/json")
      .header("Authorization", s"Bearer $authorization")
      .header("Timeout", timeout.toString)
      .body(notActivatedCouponRequest)
      .response(asJson[NotActivatedCouponResponse])

  /**
   * Get information about the specified coupon.
   * 
   * Expected answers:
   *   code 200 : CouponInfoResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   * 
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param couponInfoRequest 
   */
  def api1LoyaltyIikoCouponsInfoPost(authorization: String, timeout: Option[Int] = None, couponInfoRequest: Option[CouponInfoRequest] = None
): Request[Either[ResponseException[String, Exception], CouponInfoResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/loyalty/iiko/coupons/info")
      .contentType("application/json")
      .header("Authorization", s"Bearer $authorization")
      .header("Timeout", timeout.toString)
      .body(couponInfoRequest)
      .response(asJson[CouponInfoResponse])

  /**
   * Get a list of coupon series in which there are not deleted and not activated coupons.
   * 
   * Expected answers:
   *   code 200 : SeriesWithNotActivatedCouponsResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   * 
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param seriesWithNotActivatedCouponsRequest 
   */
  def api1LoyaltyIikoCouponsSeriesPost(authorization: String, timeout: Option[Int] = None, seriesWithNotActivatedCouponsRequest: Option[SeriesWithNotActivatedCouponsRequest] = None
): Request[Either[ResponseException[String, Exception], SeriesWithNotActivatedCouponsResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/loyalty/iiko/coupons/series")
      .contentType("application/json")
      .header("Authorization", s"Bearer $authorization")
      .header("Timeout", timeout.toString)
      .body(seriesWithNotActivatedCouponsRequest)
      .response(asJson[SeriesWithNotActivatedCouponsResponse])

  /**
   * Get all organization's manual conditions.
   * 
   * Expected answers:
   *   code 200 : GetManualConditionsResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   * 
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param getByOrganizationIdRequest 
   */
  def api1LoyaltyIikoManualConditionPost(authorization: String, timeout: Option[Int] = None, getByOrganizationIdRequest: Option[GetByOrganizationIdRequest] = None
): Request[Either[ResponseException[String, Exception], GetManualConditionsResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/loyalty/iiko/manual_condition")
      .contentType("application/json")
      .header("Authorization", s"Bearer $authorization")
      .header("Timeout", timeout.toString)
      .body(getByOrganizationIdRequest)
      .response(asJson[GetManualConditionsResponse])

  /**
   * Get all loyalty programs for organization.
   * 
   * Expected answers:
   *   code 200 : GetProgramsResponse (Success)
   *   code 400 : ErrorResponse (Bad Request)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 500 : ErrorResponse (Server Error)
   *   code 408 : ErrorResponse (Request Timeout)
   * 
   * @param authorization Authorization token.
   * @param timeout Timeout in seconds.
   * @param getProgramsRequest 
   */
  def api1LoyaltyIikoProgramPost(authorization: String, timeout: Option[Int] = None, getProgramsRequest: Option[GetProgramsRequest] = None
): Request[Either[ResponseException[String, Exception], GetProgramsResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/api/1/loyalty/iiko/program")
      .contentType("application/json")
      .header("Authorization", s"Bearer $authorization")
      .header("Timeout", timeout.toString)
      .body(getProgramsRequest)
      .response(asJson[GetProgramsResponse])

}
